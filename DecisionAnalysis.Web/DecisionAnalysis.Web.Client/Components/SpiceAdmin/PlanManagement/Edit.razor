@page "/spice-admin/subscriptionplans/edit"
@using DataAccess.Entities
@using BusinessDomain.Contracts
@inject NavigationManager NavigationManager
@inject ISubscriptionPlanManager SubscriptionPlanManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>SubscriptionPlan</h4>
<hr />
@if (SubscriptionPlan is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="SubscriptionPlan" OnValidSubmit="UpdateSubscriptionPlan" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="SubscriptionPlan.Id" value="@SubscriptionPlan.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="SubscriptionPlan.Name" class="form-control" />
                    <ValidationMessage For="() => SubscriptionPlan.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="name" class="form-label">Stripe Price Id:</label>
                    <InputText id="name" @bind-Value="SubscriptionPlan.StripePriceId" class="form-control" />
                    <ValidationMessage For="() => SubscriptionPlan.StripePriceId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="monthlycost" class="form-label">MonthlyCost:</label>
                    <InputNumber id="monthlycost" @bind-Value="SubscriptionPlan.MonthlyCost" class="form-control" />
                    <ValidationMessage For="() => SubscriptionPlan.MonthlyCost" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="annualcost" class="form-label">AnnualCost:</label>
                    <InputNumber id="annualcost" @bind-Value="SubscriptionPlan.AnnualCost" class="form-control" />
                    <ValidationMessage For="() => SubscriptionPlan.AnnualCost" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="@(Index.PageUrl)">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public long Id { get; set; }

    private const string PageUrl = "/spice-admin/subscriptionplans/edit";

    public static string GetPageUrl(long id) => $"{PageUrl}?id={id}";

    [SupplyParameterFromForm]
    public SubscriptionPlan? SubscriptionPlan { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SubscriptionPlan ??= await SubscriptionPlanManager.GetSubscriptionPlanById(Id);

        if (SubscriptionPlan is null)
        {
            NavigationManager.NavigateTo(NotFound.PageUrl);
        }
    }

    // To protect from over posting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSubscriptionPlan()
    {
        await SubscriptionPlanManager.UpdateSubscriptionPlan(SubscriptionPlan!);

        NavigationManager.NavigateTo(Index.PageUrl);
    }
}
